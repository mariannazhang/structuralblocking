results <- mediation::mediate(model.M, model.Y, treat="condition", mediator="IH", boot=TRUE, sims=500, dropobs=TRUE)
(l <- sapply(data_means_subj, function(x) is.factor(x)))
m <- data_means_subj[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
lapply(data_means_subj[c("x1", "x2", "x3")], unique)
lapply(data_means_subj[c("condition", "IH", "O", "subject")], unique)
lapply(data_means_subj[c("condition", "IH", "O")], unique)
debug_contr_error <- function (dat, subset_vec = NULL) {
if (!is.null(subset_vec)) {
## step 0
if (mode(subset_vec) == "logical") {
if (length(subset_vec) != nrow(dat)) {
stop("'logical' `subset_vec` provided but length does not match `nrow(dat)`")
}
subset_log_vec <- subset_vec
} else if (mode(subset_vec) == "numeric") {
## check range
ran <- range(subset_vec)
if (ran[1] < 1 || ran[2] > nrow(dat)) {
stop("'numeric' `subset_vec` provided but values are out of bound")
} else {
subset_log_vec <- logical(nrow(dat))
subset_log_vec[as.integer(subset_vec)] <- TRUE
}
} else {
stop("`subset_vec` must be either 'logical' or 'numeric'")
}
dat <- base::subset(dat, subset = subset_log_vec)
} else {
## step 1
dat <- stats::na.omit(dat)
}
if (nrow(dat) == 0L) warning("no complete cases")
## step 2
var_mode <- sapply(dat, mode)
if (any(var_mode %in% c("complex", "raw"))) stop("complex or raw not allowed!")
var_class <- sapply(dat, class)
if (any(var_mode[var_class == "AsIs"] %in% c("logical", "character"))) {
stop("matrix variables with 'AsIs' class must be 'numeric'")
}
ind1 <- which(var_mode %in% c("logical", "character"))
dat[ind1] <- lapply(dat[ind1], as.factor)
## step 3
fctr <- which(sapply(dat, is.factor))
if (length(fctr) == 0L) warning("no factor variables to summary")
ind2 <- if (length(ind1) > 0L) fctr[-ind1] else fctr
dat[ind2] <- lapply(dat[ind2], base::droplevels.factor)
## step 4
lev <- lapply(dat[fctr], base::levels.default)
nl <- lengths(lev)
## return
list(nlevels = nl, levels = lev)
}
debug_contr_error(data_means_subj)
view(data_means_subj)
View(data_means_subj)
x<-na.omit(data_means_subj)
View(x)
data_means_subj$condition <- factor(data_means_subj$condition)
### Data Preparation
setwd("C:/Users/Marianna/Desktop/Dropbox/Stanford/methods/tworek2016")
#### Load Relevant Libraries and Functions
library(tidyverse)
library(mediation)
#### Import data
data <- read_csv("data/pilotA.csv")
#### Initial data formatting
# Filter out those who didn't consent
data <- data %>%
filter(consent == "I agree") # Exclude those who didn't give consent
# select relevant columns
data <- data %>%
dplyr::select(IH_1:IH_C4, # inherence heuristic scale
O_1, O_2, O_3, O_4, O_5, O_6, # ought inferences
condition, # control (=control) or anti-inherence treatment (=anti_inherence)
SurveyOrder, # inherence heuristic scale first (=IH_O) vs ought inferences first (=O_IH)
attn)# attention check
# Add subject ID
data <- mutate(data, subject = row_number())
# Remove all strings (mainly Likert scale labels)
data <- data %>%
mutate_at(vars(IH_1:O_6), ~gsub("([a-z]|[A-Z]|\\s)*", "", .)) %>%
mutate_at(vars(IH_1:O_6), as.numeric)
#### Data exclusion / filtering
data <- data %>%
filter(attn == "Yes" | # Exclude those who didn't pay attention
IH_C1 <=5 | IH_C2 <=5 | IH_C3 >= 5 | IH_C4 >= 5) %>% # Exclude those who failed control questions on the inherence heuristic scale
dplyr::select(-attn, -(IH_C1:IH_C4)) # Delete attn and inherence heuristic scale control columns
#### Prepare data for analysis - create columns etc.
# gather to tidy long form
data_tidy <- data %>%
gather(question, response, IH_1:O_6)
# classify items as inherence heuristic questions vs ought questions
data_tidy <- data_tidy %>%
separate(question, c("question_type", "question_number"), "_")
# summarize inherence bias average and ought measure average across conditions
data_means <- data_tidy %>%
group_by(condition, question_type) %>%
summarize(avg=mean(response, na.rm=TRUE), sd=sd(response, na.rm=TRUE), n())
View(data_means)
## Manipulation check: t-test between conditions on inherence heuristic scale
t.test(response ~ condition, data_tidy, subset = question_type == "IH")
## Effects of manipulation on ought inferences: t-test between conditions on ought measure
t.test(response ~ condition, data_tidy, subset = question_type == "O")
## Effects of manipulation on ought inferences via inherence bias: mediation analysis from condition to inherence heuristic scale to ought measure
# Average inherence bias and ought measure per subject
data_means_subj <- data_tidy %>%
group_by(subject, condition, question_type) %>%
summarize(avg=mean(response, na.rm=TRUE)) %>%
spread(question_type, avg)
# condition coded as 0 (=control) or 1 (=anti_inherence) facotr
data_means_subj$condition <- gsub('control', '0', data_means_subj$condition)
data_means_subj$condition <- gsub('anti_inherence', '1', data_means_subj$condition)
data_means_subj$condition <- as.factor(data_means_subj$condition)
na.omit(data_means_subj)
View(data_means_subj)
# condition to ought measure (x->y)
model.0 <- lm(O ~ condition, data_means_subj)
summary(model.0)
# condition to inherence bias (x->m)
model.M <- lm(IH ~ condition, data_means_subj)
summary(model.M)
# condition and inherence bias to ought measure (x+m -> y)
model.Y <- lm(O ~ condition + IH, data_means_subj)
summary(model.Y)
set.seed(1234)
results <- mediation::mediate(model.M, model.Y, treat="condition", mediator="IH", boot=TRUE, sims=500)
?contr.funs
?isOF
install.packages("janitor")
?rnorm
?range
?t.test
?++
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p
if(p<0.05){sigResults++}
?if
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p
if(p<0.05) sigResults+
}
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p
if(p<0.05) sigResults++
}
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p
t.test(x, y)
p <- t.test(x, y)$p-value
p <- t.test(x, y)$p
t.test(x, y)
t.test(x, y)$p.
?t.test
colnames(t.test(x,y))
colnames(t.test())
colnames(t.test
)
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p<0.05) sigResults++
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p<0.05) sigResult <- sigResults + 1
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p<0.05) sigResult <- sigResults + 1
}
sigResults
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p<0.05) sigResults <- sigResults + 1
}
sigResults
?replicate
replicate(10000, t.test(rnorm(30), rnorm(30))$p.)
sigResults <- 0
replicate(10000, if(t.test(rnorm(30), rnorm(30))$p. < 0.05) sigResults <- sigResults + 1)
results <- replicate(10000, if(t.test(rnorm(30), rnorm(30))$p. < 0.05))
results <- replicate(10000, t.test(rnorm(30), rnorm(30))$p. < 0.05)
mean(results)
results <- replicate(10000, t.test(rnorm(30), rnorm(30))$p. < 0.05)
sum(results)
double.sample <- function () {
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p > 0.05 & p < 0.25) {
x <- x + rnorm(30)
y <- y + rnorm(30)
p <- t.test(x, y)$p.
}
}
double.sample <- function () {
x <- rnorm(30)
y <- rnorm(30)
p <- t.test(x, y)$p.
if(p > 0.05 & p < 0.25) {
x <- x + rnorm(30)
y <- y + rnorm(30)
p <- t.test(x, y)$p.
}
p
}
results <- replicate(10000, double.sample)
sum(results)
head(results)
t.test(x)
?t.test
sigResults <- 0
for (i in 1:10000){
x <- rnorm(30)
p <- t.test(x)$p.
if(p<0.05) sigResults <- sigResults + 1
}
sigResults
results <- replicate(10000, t.test(rnorm(30))$p. < 0.05)
sum(results)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > 0.05 & p < 0.25) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
p_resample <- .05
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.5
p_resample <- (0.05, 0.5)
# double sample any time 0.05 < p < 0.5
p_resample <- ("0.05", "0.5")
# double sample any time 0.05 < p < 0.5
p_resample <- c(0.05, 0.)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.5
p_resample <- c(0.05, 0.5)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time p > .05
p_resample <- .05
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time p > .05
p_resample <- .05
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.5
p_resample <- c(0.05, 0.5)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.5
p_resample <- c(0.05, 0.5)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.5
p_resample <- c(0.05, 0.5)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
double sample any time 0.05 < p < 0.75
# double sample any time 0.05 < p < 0.75
p_resample <- c(0.05, 0.75)
double.sample <- function () {
x <- rnorm(30)
p <- t.test(x)$p.
if(p > p_resample[1] & p < p_resample[2]) {
x <- c(x, rnorm(30))
p <- t.test(x)$p.
}
p
}
results <- replicate(10000, double.sample() < 0.05)
sum(results)
install.packages("corrr")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("quizbowl_leadership_gender_12.2.18.csv")
library(tidyverse)
data <- read_csv("quizbowl_leadership_gender_12.2.18.csv")
data
?count
data_gender_org <- data %>%
count(gender, PACE, sort=TRUE)
data_gender_org
data_gender <- data %>%
count(gender, sort=TRUE)
data_gender
79/(79+18)
data_PACE <- data %>%
filter(PACE == "yes")
data_PACE
data_PACE <- data %>%
filter(PACE == "yes") %>%
count(gender)
data_PACE
data_PACE <- data %>%
filter(PACE == "yes") %>%
count(gender) %>%
gather(female, male, n)
data_PACE
data_PACE <- data %>%
filter(PACE == "yes") %>%
count(gender) %>%
gather(female, male)
data_PACE
data_PACE <- data %>%
filter(PACE == "yes") %>%
count(gender)
data_PACE
49/(14+49)
data_overall <- data %>%
count(gender)
data_overall
79/(18+79)
data_ACF <- data %>%
filter(ACF == "yes") %>%
count(gender)
data_ACF
32/39
data_NAQT <- data %>%
filter(NAQT == "yes") %>%
count(gender)
data_NAQT
12/14
install.packages("cowplot")
library(cowplot)
install.packages("dplyr")
library(lubridate)
install.packages("hrbrthemes")
devtools::install_github(“kemacdonald/cogsci2016")
devtools::install_github("kemacdonald/cogsci2016")
install.packages("radix")
ls()
getwd()
setwd(C:/Users/Marianna/Desktop/Dropbox/psych papers)
setwd("C:/Users/Marianna/Desktop/Dropbox/psych papers")
setwd("C:/Users/Marianna/Desktop/Dropbox/psych papers/categories and language/MuradogluEtAl_2019_formalExplanations_essentialism")
require("knitr")
### Data Preparation
#### Load Relevant Libraries and Functions
library(tidyverse)
#### Import data for analysis
data <- read_csv("MuradogluEtAl_2019_social_data.csv")
View(Data)
View(data)
?mutate_at
install.packages("questionr")
install.packages("rtools")
install.packages("Rtools")
install.packages(c("backports", "BH", "brms", "broom", "callr", "gclus", "git2r", "htmlTable", "httpuv", "httr", "processx", "ps", "quantreg", "readr", "readxl", "RMySQL", "rsconnect", "spam", "StanHeaders", "tibble"))
install.packages(c("backports", "BH", "brms", "broom", "callr", "gclus", "git2r", "htmlTable", "httpuv", "httr", "processx", "ps", "quantreg", "readr", "readxl", "RMySQL", "rsconnect", "spam", "StanHeaders", "tibble"))
install.packages(c("backports", "BH", "brms", "broom", "callr", "gclus", "git2r", "htmlTable", "httpuv", "httr", "processx", "ps", "quantreg", "readr", "readxl", "RMySQL", "rsconnect", "spam", "StanHeaders", "tibble"))
